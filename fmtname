#!/usr/bin/python3
# -*- coding: utf-8 -*-
# -*- decoding: utf-8 -*-
"""Format the file name giving it a text style"""
from os import path, listdir, rename
import sys
import argparse
from pathlib import Path

__version__ = '2.0.0'

# Set colors
rd = "\033[01;31m"
gn = "\033[01;32m"
bl = "\033[01;34m"
end = "\033[00m"


def errorMessage(message, exit_code=1):
    '''it receives an error message and an error code as arguments and terminates the script execution'''
    message = f'\n{rd}[ERROR]{end} {message}\n\n'
    sys.stderr.write(message)
    sys.exit(exit_code)


def formatted_name(fpath, style):
    '''format the file name and apply the selected style'''
    # Extract each part of the path and the file
    file_path, file_name = path.split(fpath)
    name, extension = path.splitext(file_name)

    # Mapping strings to functions
    func = {'lower': str.lower, 'upper': str.upper,
            'title': str.title, 'capitalize': str.capitalize} 

    # Apply the style
    ftext = func[style](name)

    # Changes to lowercase if the extension has another format
    if not extension.islower():
        extension = func['lower'](extension)

    # Build the new path
    return file_path + '/' + ftext + extension


def process_files(directory, style):
    '''process the directory files'''
    for f in listdir(directory):
        fpath = directory + '/' + f
        
        # Filter only files
        if path.isfile(fpath):
            fname = formatted_name(fpath, style)

            # Rename the file
            print(f'{bl}old{end}: {fpath} -> {gn}new{end}: {fname}')
            rename(fpath, fname)


if __name__ == '__main__':
    text_formats = ('lower', 'upper', 'title', 'capitalize')

    parser = argparse.ArgumentParser(description='Rename the files to uppercase, lowercase, titlecase or capitalize text.')
    parser.add_argument('-V', '--version', action='version', version=f'v{__version__}', help='script version')
    parser.add_argument('-d', '--dpath', required=True, metavar='', help='specify the directory to process.')
    parser.add_argument('-f', '--format', required=True, metavar='', help=f'text format {text_formats}')
    parser.add_argument('-v', '--verbose', action='store_true', help='show what is being done')
    args = parser.parse_args()

    # Check the type of style chosen
    text_format = args.format
    if not text_format in text_formats:
        errorMessage(f'{text_format} is an invalida text format, use -h for more')

    # Check if the directory exists and that it is not empty
    directory_path = Path(args.dpath)
    if not path.isdir(directory_path):
        errorMessage(f'"{dir_path}" is not a valid directory, An existing and non-empty directory is required')

    process_files(args.d, args.s)
